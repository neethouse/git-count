#!/bin/bash

###
#
# This is a git-subcommand that counts the number of lines of code that each author wrote.
#
# Dear Hacker.
# This command is very time consuming. please help!
#
###

VERSION=1.3.0

function show-usage() {

######
# Editing and README.md When you finish editing the usage message.
#####

cat << EOD
usage: git count [--ltsv] [--csv] <path> [<regex>]

CAUTION !!

Is very time consuming, if the repository is large.

OPTIONS

    <path>
        Attempt to counts the file hierarchy rooted in each file.

        e.g.
            Following the "src" directory.   -> git count "path/to/src"
            Following the "test" directory.  -> git count "path/to/test"
            Following the current directory. -> git count "."

    <regex>
        If you specify this regex pattern.
        You can count lines that files that match the regular expression.
        This regex pattern is the egrep regex pattern.

        e.g.
            Following the "src" directory.   -> git count "path/to/src"
            Only Java source code.  -> git count "." "\.java$"
            Only Scala source code. -> git count "." "\.scala$"
            Only Objective-C code.  -> git count "." "\.[hm]$"

        Or

        You can use default regex from git-config.

        git config --local git-count.regex "your regex pattern"
        git config --global git-count.regex "your regex pattern"

        Commandline argument takes precedence.

    --ltsv
        Output LTSV format.
        The standard formatis usedif you do not specify.

        e.g.
            @username0:count0<TAB>@username1:count1<TAB>@username2:count2<TAB>total:total-count<TAB>files:file-count

    --csv
        Output CSV format.
        The standard formatis usedif you do not specify.

        e.g.
            @username0,10
            @usernamet,22
            @username2,30
            total,62
            files,3

For more information -> "https://github.com/neethouse/git-count"
version : ${VERSION}
EOD
}

CURRENT_DIR=`pwd`
OPTS=()
FORMAT=""

for OPT in "$@"; do
    case "$OPT" in
        "--version" )
            echo $VERSION
            exit
            ;;

        "-h" )
            show-usage
            exit
            ;;

        "--ltsv" | "--csv" )

            FORMAT=$OPT
            ;;

        * )
            OPTS+=("$OPT")
            ;;
    esac
done

# tmp files
cd /tmp
TMP_DIR=`mktemp -d git-count.XXXXXX`
cd $TMP_DIR
TMP_DIR=`pwd`
TMP_GIT_BLAME_FILE="$TMP_DIR/blame.tmpfile"
TMP_USERLIST_FILE="$TMP_DIR/userlist.tmpfile"
TMP_COUNTS_FILE="$TMP_DIR/counts.tmpfile"
TMP_RESULT_CSV="$TMP_DIR/result.csv"

trap 'rm -rf "$TMP_DIR" && exit 1' 1 2 3 15

cd $CURRENT_DIR

if ! git status > /dev/null; then
    exit 1
fi

# Make user list
git log --pretty=format:"%an" | sort | uniq > "$TMP_USERLIST_FILE"

# Make the (length of the longest user name + 1)
NAME_SPACE_LENGTH=`awk '{ if (length($0) > max) max = length($0) }
END { print (max + 1) }' "$TMP_USERLIST_FILE"`

DIR="."

if [ ${#OPTS[@]} -gt 0 ]; then
    DIR=${OPTS[0]}
else
    show-usage
    exit 1
fi

REGEX=".*"

if git config --get git-count.regex > /dev/null; then
    REGEX=`git config --get git-count.regex`
fi

if [ ${#OPTS[@]} -gt 1 ]; then
    REGEX=${OPTS[1]}
fi

# Show the number of files to be counted.
NUM_OF_FILES="`git grep -I --name-only -G ".*" -- "$DIR" | egrep "$REGEX" | wc -l | sed -e 's/[^0-9]//g'`"

# blame (^^ã‚ž
git grep -I --name-only -G ".*" -- "$DIR" | egrep "$REGEX" | xargs -I {} git --no-pager blame --line-porcelain -f -w "{}"| grep "^author " > "$TMP_GIT_BLAME_FILE"

TOTAL_NUM_OF_LINES=0
# count lines each author.
while read USER_NAME; do

    NUM_OF_LINE=`cat "$TMP_GIT_BLAME_FILE" | grep "${USER_NAME}" | wc -l | sed -e 's/[^0-9]//g'`
    TOTAL_NUM_OF_LINES=$(($TOTAL_NUM_OF_LINES + $NUM_OF_LINE))
    echo "$USER_NAME","$NUM_OF_LINE" >> $TMP_COUNTS_FILE

done < $TMP_USERLIST_FILE

cat $TMP_COUNTS_FILE | sort -k2 -n -r -t , > $TMP_RESULT_CSV
echo total,$TOTAL_NUM_OF_LINES >> $TMP_RESULT_CSV
echo files,$NUM_OF_FILES >> $TMP_RESULT_CSV

case $FORMAT in
    "--ltsv" )
        # cat | make LTSV | remove last <TAB>
        cat $TMP_RESULT_CSV | awk '{sub(",", ":");printf "%s\t", $1}' | sed -e 's/\t$//'
        ;;

    "--csv" )
        cat $TMP_RESULT_CSV
        ;;

    * )
        # human readable format
        TMP_SORTED_CSV="$TMP_DIR/sorted.csv"
        cat $TMP_COUNTS_FILE | sort -k2 -n -r -t , > $TMP_SORTED_CSV
        echo $NUM_OF_FILES files found.
        echo
        while read RSLT; do
            printf "%-${NAME_SPACE_LENGTH}s\t%-10s\n" `echo $RSLT | cut -d , -f 1` `echo $RSLT | cut -d , -f 2`
        done < $TMP_SORTED_CSV
        printf "\nTotal\t%d\n" $TOTAL_NUM_OF_LINES
        ;;
esac

# clean up
rm -rf $TMP_DIR

